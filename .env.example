# ============================================================================
# DDoSia Tracker - Environment Configuration
# ============================================================================
# Copy this file to .env and configure for your environment
# The default settings work for most deployments


# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================
# PostgreSQL connection string
# Format: postgresql://username:password@host:port/database
# Note: Default password is fine since all data is publicly available DDoSia information
DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ddosia

# PostgreSQL credentials (used in docker-compose)
POSTGRES_DB=ddosia
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres


# ============================================================================
# DOWNLOADER SERVICE CONFIGURATION
# ============================================================================
# Source URL to monitor for DDoSia target JSON files
BASE_URL=https://www.witha.name/data/

# Directory for downloaded files (inside container)
DOWNLOAD_DIR=/app/data/downloads

# Delay between individual file downloads (seconds)
# Helps prevent overwhelming the source server
DOWNLOAD_DELAY=1.0

# Polling interval to check for new files (seconds)
# Default: 300 (5 minutes)
DOWNLOADER_POLL_INTERVAL=300

# HTTP request timeout for downloading files (seconds)
DOWNLOAD_TIMEOUT=30


# ============================================================================
# PROCESSOR SERVICE CONFIGURATION
# ============================================================================
# How often to check for new files to process (seconds)
# Default: 10 seconds
PROCESSOR_POLL_INTERVAL=10

# Error retry delay if processing fails (seconds)
PROCESSOR_ERROR_RETRY_DELAY=30


# ============================================================================
# MAP SERVICE CONFIGURATION
# ============================================================================
# Flask environment (development/production)
FLASK_ENV=production

# Port for the web interface
# External port mapping configured in docker-compose.yml
MAP_SERVICE_PORT=8000

# Number of Gunicorn workers
# Recommendation: (2 * CPU cores) + 1
GUNICORN_WORKERS=2


# ============================================================================
# MAP UPDATER SERVICE CONFIGURATION
# ============================================================================
# Path to TLD country mapping JSON file (inside container)
MAPPING_FILE=/app/mappings/tld_to_country.json

# How often to update country mappings (seconds)
# Default: 300 (5 minutes)
MAP_UPDATER_POLL_INTERVAL=300

# Error retry delay if update fails (seconds)
MAP_UPDATER_ERROR_RETRY_DELAY=30


# ============================================================================
# GDELT WORKER CONFIGURATION
# ============================================================================
# GDELT API query parameters
# Search query for geopolitical events
GDELT_QUERY=Ukraine war

# News source domains to include (comma-separated)
# Leave empty to include all sources
GDELT_SOURCE_DOMAINS=

# Languages to filter articles (comma-separated ISO codes)
# Default: eng (English only)
GDELT_LANGUAGES=eng

# Maximum events to store per day
GDELT_MAX_EVENTS_PER_DAY=5

# GDELT API request timeout (seconds)
GDELT_TIMEOUT=30

# Delay between GDELT API requests (seconds)
# Helps respect rate limits
GDELT_REQUEST_DELAY=7

# Days to look back for recent events
# Default: 30 days
GDELT_RECENT_DAYS=30


# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================
# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO


# ============================================================================
# PERFORMANCE TUNING
# ============================================================================
# Database connection pool settings (for future implementation)
DB_POOL_MIN_CONN=2
DB_POOL_MAX_CONN=20
DB_CONNECT_TIMEOUT=10

# Batch size for bulk database inserts
DB_BATCH_SIZE=200
