services:
  postgres:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ddosia}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ddosia}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  downloader:
    build:
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - BASE_URL=${BASE_URL:-https://www.witha.name/data/}
      - DOWNLOAD_DIR=${DOWNLOAD_DIR:-/app/data/downloads}
      - DOWNLOADER_POLL_INTERVAL=${DOWNLOADER_POLL_INTERVAL:-300}
      - DOWNLOAD_DELAY=${DOWNLOAD_DELAY:-1.0}
      - DOWNLOAD_TIMEOUT=${DOWNLOAD_TIMEOUT:-30}
    volumes:
      - ./data:/app/data
    restart: unless-stopped

  processor:
    build:
      dockerfile: processor.Dockerfile
    env_file:
      - .env
    environment:
      - DOWNLOAD_DIR=${DOWNLOAD_DIR:-/app/data/downloads}
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/ddosia}
      - PROCESSOR_POLL_INTERVAL=${PROCESSOR_POLL_INTERVAL:-10}
      - PROCESSOR_ERROR_RETRY_DELAY=${PROCESSOR_ERROR_RETRY_DELAY:-30}
      - DB_BATCH_SIZE=${DB_BATCH_SIZE:-200}
    volumes:
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  map:
    build:
      context: .
      dockerfile: map.Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/ddosia}
      - FLASK_ENV=${FLASK_ENV:-production}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-2}
    ports:
      - "${MAP_SERVICE_PORT:-8000}:8000"
    volumes:
      - ./map-service/static:/app/static
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  map_updater:
    build:
      context: .
      dockerfile: map-worker/Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/ddosia}
      - MAPPING_FILE=${MAPPING_FILE:-/app/mappings/tld_to_country.json}
      - MAP_UPDATER_POLL_INTERVAL=${MAP_UPDATER_POLL_INTERVAL:-300}
      - MAP_UPDATER_ERROR_RETRY_DELAY=${MAP_UPDATER_ERROR_RETRY_DELAY:-30}
    volumes:
      - ./map-worker/mappings:/app/mappings
    depends_on:
      - postgres
    restart: unless-stopped   # Run continuously to update countries for new targets

  gdelt_worker:
    build:
      context: .
      dockerfile: gdelt.Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/ddosia}
      - GDELT_QUERY=${GDELT_QUERY:-Ukraine war}
      - GDELT_SOURCE_DOMAINS=${GDELT_SOURCE_DOMAINS:-}
      - GDELT_LANGUAGES=${GDELT_LANGUAGES:-eng}
      - GDELT_MAX_EVENTS_PER_DAY=${GDELT_MAX_EVENTS_PER_DAY:-5}
      - GDELT_TIMEOUT=${GDELT_TIMEOUT:-30}
      - GDELT_REQUEST_DELAY=${GDELT_REQUEST_DELAY:-7}
      - GDELT_RECENT_DAYS=${GDELT_RECENT_DAYS:-30}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  data:
  pgdata: